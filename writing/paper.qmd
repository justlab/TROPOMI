---
title: Correcting retrieval error in TROPOMI NO~2~ using Pandonia and machine learning

bibliography: references.json
csl: https://www.zotero.org/styles/atmospheric-measurement-techniques

format:
  html:
    embed-resources: true

echo: FALSE
df-print: kable
---

```{r}
source("code/modeling.R")
comma = scales::comma
```

# Abstract

# Introduction

# Method

Our ground observations come from Pandonia. We use the total-column NO~2~ product, with retrieval code "`r pandonia.retrieval.codes["no2.total"]`".

Our satellite observations come from the TROPOMI product with filenames containing `S5P_RPRO_L2__NO2_`, described at `http://web.archive.org/web/20230414/https://sentinels.copernicus.eu/web/sentinel/-/copernicus-sentinel-5-precursor-full-mission-reprocessed-datasets-further-products-release` and downloaded from `https://catalogue.dataspace.copernicus.eu/odata/v1/Products(FILE_ID)/$value` , where `FILE_ID` is replaced. The variable of primary interest is `nitrogendioxide_total_column`.

We match each satellite observation with the mean of all appropriately located ground observations within 30 minutes.

# Results

The unit of NO~2~ for all analyses is μmol / m^2^.

## Matchup

Considering `r date.first` through `r date.last`, we matched `r d = data.for.modeling(); comma(nrow(d))` satellite observations of NO~2~ to a total of `r comma(sum(d$n.ground.obs))` ground observations of NO~2~ from `r uniqueN(d$cluster)` distinct Pandonia locations. @fig-error-distribution shows the distribution of the differences between ground and satellite values.

```{r fig-error-distribution}
#| fig-cap: "A density plot of satellite NO~2~ values minus ground values. The *x*-axis limits are set to the top and bottom percentiles."
ggplot(d) +
    geom_vline(xintercept = 0, color = "gray") +
    geom_density(aes(y.error), bw = .5) +
    coord_cartesian(expand = F,
        xlim = quantile(d$y.error, c(.01, .99))) +
    scale_x_continuous(name = "Error (μmol / m²)",
        breaks = seq(-500, 500, by = 50)) +
    ylab("Density") +
    theme_classic() + theme(
        axis.line = element_line(color = "gray"),
        axis.ticks = element_line(color = "gray"),
        axis.text = element_text(color = "black"))
```

## Cross-validation

```{r tbl-cv-full}
#| tbl-cap: The full CV results.
spacetime.ivs = c("time.satellite", "stn.lon", "stn.lat")
rbind(
    cbind(IVs = "all", pretty.cv.summary()),
    cbind(IVs = "spacetime", pretty.cv.summary(ivs = spacetime.ivs)))
```

Here are the same results partitioned in various ways:

```{r tbl-cv-by-year}
#| tbl-cap: The CV broken down by year.
pretty.cv.summary(quote(list(Year = year(sat.time))))
```

```{r tbl-cv-by-month}
#| tbl-cap: The CV broken down by month.
pretty.cv.summary(quote(list(Month = month(sat.time))))
```

```{r tbl-special-cluster}
#| tbl-cap: The CV broken down by membership in the "terrible three".
noteworthy = c("BayonneNJ", "MexicoCity-UNAM", "MexicoCity-Vallejo")
rbindlist(lapply(c("all", "spacetime"), \(ivs)
    cbind("IVs" = ivs, pretty.cv.summary(
        quote(list("Station" = ifelse(
            cluster %in% noteworthy, as.character(cluster), "All others"))),
        ivs = (if (ivs == "all") "ALL" else spacetime.ivs)))))
```

```{r tbl-cv-high}
#| tbl-cap: The CV broken down by whether the ground value is particularly high.
pretty.cv.summary(quote(list("Ground NO~2~ ≥ 200" = y.ground >= 200)))
```

The proportion of observations by station and value:

```{r}
round(d = 3, with(d.xgb(), prop.table(table(
    "Terrible three" = cluster %in% noteworthy,
    "Ground NO_2 ≥ 200" = y.ground >= 200))))
```

```{r fig-agreement}
#| fig-cap: A comparison of ground and satellite values, with error envelopes in blue.

envelopes = with(d.xgb(), sapply(c("y.sat", "y.ground.pred"), simplify = F, \(variable)
   {o = empirical.error.envelope(
        obs = y.ground,
        pred = get(variable))
    assert(o$convergence == 0)
    `names<-`(o$par, c("additive", "multiplicative"))}))

sample.obs = `[`(
    CJ(
        variable = factor(c("y.sat", "y.ground.pred")),
        y.ground = seq(0, 500, len = 1000)),
    by = variable,
    j =
       {ps = envelopes[[as.character(variable)]]
        punl(
            y.ground,
            envelope.hi = y.ground + ps[1] + ps[2]*y.ground,
            envelope.lo = y.ground - ps[1] - ps[2]*y.ground)})
ggplot(
        melt(d.xgb()[, .(y.ground, y.ground.pred, y.sat)],
            id.vars = "y.ground")) +
    ggpointdensity::geom_pointdensity(aes(y.ground, value),
        adjust = .2, size = .25) +
    scale_color_gradient(low = "#dddddd", high = "black", guide = "none") +
    geom_abline() +
    geom_line(data = sample.obs, aes(y.ground, envelope.hi),
        color = "#6666aa") +
    geom_line(data = sample.obs, aes(y.ground, envelope.lo),
        color = "#6666aa") +
    coord_equal(xlim = c(0, 500), ylim = c(0, 500), expand = F) +
    facet_wrap(vars(factor(
        ifelse(variable == "y.sat", "Raw", "Corrected"),
        levels = c("Raw", "Corrected")))) +
    xlab("Ground NO₂ (μmol / m²)") +
    ylab("Satellite NO₂ (μmol / m²)") +
    theme_classic() + theme(
        axis.text = element_text(color = "black"))
```

The envelope parameters are:

```{r}
envelopes
```

Mean envelope widths:

```{r}
sapply(simplify = F, envelopes, \(ps)
    unname(2*ps[1] + 2*ps[2]*mean(d.xgb()$y.ground)))
```

## SHAP

Mean absolute SHAPs:

```{r}
t(t(round(d = 2, sort(dec = T,
    colMeans(abs(model.with.xgboost()$d.shap))))))
```

```{r fig-y-sat-se-shap}
#| fig-cap: 'A heatmap of the value and SHAP of satellite NO~2~ standard error for each observation.'

mheatmap("y.sat.se", "shap.y.sat.se", binwidth = c(0.2, 0.2)) +
    coord_equal(
       xlim = c(10, 40),
       ylim = c(-20, 20))
```

```{r fig-y-error-vs-y-sat-se}
#| fig-cap: 'A heatmap of empirical error versus standard error for each observation.'

mheatmap("y.sat.se", "y.error", binwidth = c(0.2, 2)) +
    coord_cartesian(expand = F,
        xlim = c(10, 40),
        ylim = c(-200, 50))
```

# Discussion

# References
